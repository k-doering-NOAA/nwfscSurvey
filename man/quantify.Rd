% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantify.R
\name{quantify}
\alias{quantify}
\alias{add_quantify}
\title{Quantify number of observations by group}
\usage{
quantify(data, ..., vars, fns = list(N = length, NTow = n_distinct), sep = "_")

add_quantify(
  data,
  ...,
  vars,
  fns = list(N = length, NTow = n_distinct),
  sep = "_"
)
}
\arguments{
\item{data}{A data frame to be processed.}

\item{...}{<\link[dplyr:dplyr_data_masking]{dplyr::dplyr_data_masking}>
Variables to group by, i.e., passed to \code{\link[dplyr:group_by]{dplyr::group_by()}}.
Must be valid, unquoted column names present in \code{data}.}

\item{vars}{<\link[dplyr:dplyr_data_masking]{dplyr::dplyr_data_masking}>
A vector of unquoted variable names.}

\item{fns}{A named list of functions. Only functions that accept vectors
as their first argument will work, e.g.,
\code{\link[=length]{length()}}, \code{\link[dplyr:n_distinct]{dplyr::n_distinct()}}.
The default uses both of these functions, compared to \code{\link[dplyr:count]{dplyr::count()}}
that is hard-coded to use \code{\link[=length]{length()}}.
The names of each function in the list are used to name the resulting
column in the returned data frame.}

\item{sep}{A string used to paste together other strings using
\code{\link[=paste]{paste()}}.  We recommend using a distinct, i.e., rarely used,
string such that pattern matching without unnecessary false positives
is easy. For example, when do you ever see \code{..} in a column name?
The default is \code{"_"}.}
}
\value{
A long data frame with
\itemize{
\item a column for each grouping structure passed to \code{...} and
\item columns based on all combinations of input variables and functions
named using \code{\link[glue:glue]{glue::glue()}}, i.e., \code{"{{var}}{{sep}}{{fn}}"}.
Missing observations for each grouping structure are included in
the final output with a count of \code{0L} using \code{count(.drop = FALSE)}.
If \code{add_quantity()} was called, columns are added to \code{data}.
}
}
\description{
\code{\link[=quantify]{quantify()}} lets you quickly quantify the number of
observations or distinct levels of variables within a group.
The function extends the functionality of \code{\link[dplyr:count]{dplyr::count()}} by
\itemize{
\item allowing multiple variables via \code{\link[dplyr:across]{dplyr::across()}} and
\item allowing users to pass a list of functions rather than assuming that
all users are interested in \code{\link[dplyr:context]{dplyr::n()}}.
}
}
\details{
The code for \code{quantify()} is roughly equivalent to a wrapper around
\code{\link[dplyr:group_by]{dplyr::group_by()}} and \code{\link[dplyr:summarise]{dplyr::summarise()}}, i.e.,

\if{html}{\out{<div class="sourceCode">}}\preformatted{  data \%>\%
    group_by(...) \%>\%
    summarise("\{\{.col\}\}\{\{sep\}\}\{\{.fun\}\}" := ~)
}\if{html}{\out{</div>}}

The names of the new columns are dynamically created by pasting the
string version of the column name with the name of the function.
This should help your future self know what variable was summarized and
what function was used for the summary. This combination of variable
and function is necessary because you cannot have duplicate column names.
The column name and function name will be concatenated with \code{sep}.
}
\examples{
# Using iris from {datasets} we rename the default functions to make
# the resulting column names more intuitive to non-fisheries users
# "N" is number of observations and "Unique" is number of unique values
# per Species
data("iris", package = "datasets")
quantify(
  iris,
  Species,
  vars = c(Petal.Length, Sepal.Length),
  fns = list(N = length, Unique = dplyr::n_distinct),
  sep = "_"
)

# Repeat simple example above but add columns to iris
simple <- add_quantify(
  iris,
  Species,
  vars = c(Petal.Length, Sepal.Length),
  fns = list(N = length, Unique = dplyr::n_distinct),
  sep = "_"
)
# 4 new columns are added
dim(simple) - dim(iris)

# Example with bio_nwfsc_combo by NA, Sex, Year
quantify(
  bio_nwfsc_combo,
  isNA = is.na(Length_cm),
  Sex_SS3 = codify_sex_SS3(Sex),
  Year = Year,
  var = Trawl_id
)

}
\seealso{
\itemize{
\item \code{\link[dplyr:count]{dplyr::count()}} is a similar wrapper function but you cannot
pass user-supplied functions
\item \code{\link[dplyr:across]{dplyr::across()}} allows users to pass multiple variables to \code{vars}
}

Other dplyr verbs: 
\code{\link{bin}()}
}
\author{
Kelli F. Johnson
}
\concept{dplyr verbs}
